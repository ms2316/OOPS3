Task 1

Java Generics do not support the use of primitive types because java compiler casts parameterised types to "Object" class, which is impossible in case 
with primitives since primmitives do not extend Object class unlike other classes. At compile time compiler checks if a programmer has written crap code,
e.g added to a generic List<Integer> an object of the other type. Assuming that there were no generics in Java adding object of another type would be perfectly fine since 
add method accepts argument of type Object(and since all classes are inherited from Object class that would be fine). In the case with primitives this is not possible because
primitives simply cannot be casted to object class since they do not extend it.


Task 2

code

Task 3

First, two different object are created of type String. Reference s1 points to the first one while ref s2 to the second. Comparing s1 and s2 gives false
because the comparison of references takes place. In the first case references are different since they point to different objects.
In the second example object of type string "Hi" is created and reference s3 is assigned to point to this object. However, when assigning a reffered object
so s4 reference new object is not created, since compiler notices that there is already that kind of object created, so s4 points to the same place
in memory as s3. Hence comparison of s3 and s4 yields true since references are the same.

Task 4

code

Task 5

State pattern is one of the behavioral design patterns that is used when an object changes its behavior based on its internal state. In state pattern
we create objects that represent various states and a context object whose behavior varies depending on its state. Basically, there is a state interface
and various classes that implement this interface(which represent different states). In the context object there is a ref to state interface(class), which represents current state (any implemented state).
Context methods invoke some functionality depending on current state.
While strategy pattern is used when we want to change behaviour of an object at runtime.
i.e. use different implementation of a particular method at runtime.

Task 6

Decorator pattern is used with Reader in java. BufferedReader and other readers can wrap around Reader class to decorate it. Other readers can again
wrap around the resulting reader to get even more functionality.

Questions about decorator pattern (Googling didnt help much):
1. Perhaps its better to use another abstract class instead of interface? because we could identify the object then(i.e. its last wrap).
2. How can we use old functionality? ie methods that only the wrapped object has?


Task 7

Singleton pattern is a type of pattern that is used when we want only one instance(or no instances) of an object to exist at any time.
Singleton pattern look like this: 

public class Singleton {
  
  private static Singleton instance = null;
  
  private Singleton(){ }

  public static Singleton getInstance() {
    if (instance == null) {
      instance = new Singleton();
    }
    
    return instance;
  }
  
}


Adv: 
Ensures there is only one instance of the singleton class throughout the lifetime of the application(useful with login, connection type problems)
Using Lazy instantiation of singleton(as provided above) helps save resources if singleton class is resource intense.(ie doesnt use resources until creation aka first instantiation)

Disadv:
No inheritance, since oterwise there would be multiple instances of a class which contradicts with the idea of singleton class.
Singleton hides dependencies making it impossible to conduct unit tests.

Task 8

Factory design pattern. The idea behind factory pattern is that we create object without exposing the creation logic to the user
and refer to newly created object using a common base class or interface.

public interface Shape {
   void draw();
}

public class Rectangle implements Shape {
   @Override
   public void draw() {
      System.out.println("Inside Rectangle::draw() method.");
   }
}

public class Square implements Shape {

   @Override
   public void draw() {
      System.out.println("Inside Square::draw() method.");
   }
}

public class Circle implements Shape {

   @Override
   public void draw() {
      System.out.println("Inside Circle::draw() method.");
   }
}

public class ShapeFactory {
	
   public Shape getShape(String shapeType){
      if(shapeType == null){
         return null;
      }		
      if(shapeType.equalsIgnoreCase("CIRCLE")){
         return new Circle();
         
      } else if(shapeType.equalsIgnoreCase("RECTANGLE")){
         return new Rectangle();
         
      } else if(shapeType.equalsIgnoreCase("SQUARE")){
         return new Square();
      }
      
      return null;
   }
}

Here, using ShapeFactory we can get new objects by simply calling getShape method with an argument of type string(what type of obj we want).
This pattern allows us to hide(absctract from) the creation logic.


Task 9

Mis using Inheritance

1. Using inheritance to utilize base class members even when there is no clear 'type of' relationship.
2. Extending a tremendous amount of subclasses rather than implementing different design patterns(e.g. decorator, strategy patterns)


Task 10

On paper. Will show during supervision.

Task 11

Code


